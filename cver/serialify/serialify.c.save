#include "serialify.h"
#include <stdlib.h>
#include <string.h>

void SerialifyBuf_delete_function(Object* sbuf_object) {

    SerialifyBuf* sbuf = (SerialifyBuf*)sbuf_object;

    if(sbuf->buffer_base)
        free(sbuf->buffer_base);

    free(sbuf_object);
}

SerialifyBuf* SerialifyBuf_new() {

    SerialifyBuf* sbuf = (SerialifyBuf*)malloc(sizeof(SerialifyBuf));

    if(!sbuf)
        return sbuf;

    Object_init((Object*)sbuf, SerialfyBuf_delete_function);
    sbuf->allocated_size = 0;
    sbuf->used_size = 0;
    sbuf->buffer_base = 0;
    sbuf->loc = 0;
}

int Serialify_insert_bytes(SerialifyBuf* sbuf, int count, uint8_t* inbuf) {

    int i;
    uint8_t* newbuf;

    //Allocate a buffer if it hasn't been yet
    if(!sbuf->buffer_base) {

        sbuf->buffer_base = (uint8_t*)malloc(count);

        if(!sbuf->buffer_base)
            return -1; //Need more verbose error types

        sbuf->allocated_size = count;
        sbuf->used_size = 0;
        sbuf->loc = 0;
    }

    //Check to see if there's enough room to insert the bytes
    if(sbuf->allocated_size <= (sbuf->used_size + count)) {

        //If not, double the allocated space (speedhack)
        newbuf = (uint8_t*)realloc(sbuf->buffer_base, sbuf->allocated_size << 1);

        if(!newbuf)
            return 0;

        sbuf->buffer_base = newbuf;
        sbuf->allocated_size = sbuf->allocated_size << 1;
    }

    //Copy over the data (slow)
    for(i = 0; i < count; i++) {

        sbuf->buffer_base[sbuf->loc++] = inbuf[i];
        sbuf->used_size++;
    }

    return i;
}

int Serialify_from_cstring(SerialifyBuf* sbuf, char* string) {

    return Serialify_insert_bytes(sbuf, strlen(string) + 1, string);
}

int Serialify_from_int8(SerialifyBuf* sbuf, int8_t value) {

    return Serialify_insert_bytes(sbuf, 1, (uint8_t*)&value);
}

int Serialify_from_uint8(SerialifyBuf* sbuf, uint8_t value) {

    return Serialify_insert_bytes(sbuf, 1, &value);
}

int Serialify_from_int16(SerialifyBuf* sbuf, int16_t value) {

    uint16_t* uval;
    uint8_t vbuf[2];

    uval = (uint16_t*)&value;
    vbuf[0] = (uint8_t)(((*uval) >> 8) & 0xFF);
    vbuf[1] = (uint8_t)((*uval) & 0xFF);

    return Serialify_insert_bytes(sbuf, 2, vbuf);
}

int Serialify_from_uint16(SerialifyBuf* sbuf, uint16_t value) {

    uint8_t vbuf[2];

    vbuf[0] = (uint8_t)((value >> 8) & 0xFF);
    vbuf[1] = (uint8_t)(value & 0xFF);

    return Serialify_insert_bytes(sbuf, 2, vbuf);
}

int Serialify_from_int32(SerialifyBuf* sbuf, int32_t value);
    uval = (uint16_t*)&value;
int Serialify_from_uint32(SerialifyBuf* sbuf, uint32_t value);
int Serialify_from_float(SerialifyBuf* sbuf, float value);
int Serialify_from_double(SerialifyBuf* sbuf, double value);
char* Serialify_to_cstring(SerialifyBuf* sbuf);
int8_t Serialify_to_int8(SerialifyBuf* sbuf);
uint8_t Serialify_to_uint8(SerialifyBuf* sbuf);
int16_t Serialify_to_int16(SerialifyBuf* sbuf);
uint16_t Serialify_to_uint16(SerialifyBuf* sbuf);
int32_t Serialify_to_int32(SerialifyBuf* sbuf);
uint32_t Serialify_to_uint32(SerialifyBuf* sbuf);
float Serialify_to_float(SerialifyBuf* sbuf);
double Serialify_to_double(SerialifyBuf* sbuf);
